class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new LinkedList<List<Integer>>();
        if (candidates == null || candidates.length == 0) {
            return ans;
        }   
        int[] visited = new int[candidates.length];
        bt(candidates, visited, 0, target, ans);
        return ans;
    }
    public void bt(int[] candidates, int[] visited, int start, int target, List<List<Integer>> ans) {
        if (target == 0) {
            List<Integer> combination = new LinkedList<>();
            for (int i = 0; i < visited.length; i++) {
                for (int j = 0; j < visited[i]; j++) {
                    combination.add(candidates[i]);
                }
            }
            ans.add(combination);
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (target - candidates[i] >= 0) {
                visited[i]++;
                bt(candidates, visited, i, target - candidates[i], ans);
                visited[i]--;
            }
        }
    }
}
